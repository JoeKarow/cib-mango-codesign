name: Build Executables

on:
  workflow_call:
    inputs:
      is_release:
        required: true
        type: boolean

jobs:
  build:
    strategy:
      matrix:
        include:
          # - platform_name: Windows
          #   artifact_name: windows
          #   os: windows-2022
          #   version_command: icacls "VERSION" /grant Everyone:F /T /C /Q
          #   move_command: move dist\mangotango.exe dist\mangotango_windows.exe
          #   sha_command: pwsh -c "Get-FileHash -Algorithm SHA1 dist\mangotango_windows.exe | Format-Table Hash -HideTableHeaders > dist\mangotango_windows.exe.sha1"
          #   list_command: dir dist
          #   check_command: dist\mangotango_windows.exe --noop
          #   pip_cache: ~\AppData\Local\pip\Cache
          # - platform_name: MacOS 14
          #   artifact_name: macos-14
          #   os: macos-14
          #   move_command: mv dist/mangotango dist/mangotango_macos-14
          #   sha_command: shasum -a 1 dist/mangotango_macos-14.pkg > dist/mangotango_macos-14.sha1
          #   list_command: ls -ll dist
          #   check_command: dist/mangotango_macos-14 --noop
          #   pip_cache: ~/Library/Caches/pip
          - platform_name: MacOS 15
            artifact_name: macos-15
            os: macos-15
            move_command: mv dist/mangotango dist/mangotango_macos-15
            sha_command: shasum -a 1 dist/mangotango_macos-15.pkg > dist/mangotango_macos-15.sha1
            list_command: ls -ll dist
            check_command: dist/mangotango_macos-15 --noop
            pip_cache: ~/Library/Caches/pip

    name: Build ${{ matrix.platform_name }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ matrix.pip_cache }}
          key: ${{ matrix.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ matrix.os }}-pip-


      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install PyInstaller
        run: |
          pip install pyinstaller
          echo "PYINST_BIN=\"$(which pyinstaller)\"" >> "$GITHUB_ENV"

      - name: Create macOS keychain
        id: keychain
        if: runner.os == 'macOS' && inputs.is_release
        env:
          APPLE_DEV_EMAIL: ${{secrets.APPLE_DEV_EMAIL}}
          APP_SPEC_PASS: ${{secrets.APP_SPEC_PASS}}
          APPLE_APP_CERTIFICATE: ${{secrets.DEV_APP_CERT}}
          APPLE_APP_CERT_PASSWORD: ${{secrets.DEV_APP_CERT_PASS}}
          APPLE_INST_CERTIFICATE: ${{secrets.DEV_INST_CERT}}
          APPLE_INST_CERT_PASSWORD: ${{secrets.DEV_INST_CERT_PASS}}
          APPLE_KEYCHAIN_PASS: ${{secrets.APPLE_KEY_PASS}}
        run: |
          echo "$APPLE_APP_CERTIFICATE" | base64 --decode > app_certificate.p12
          echo "$APPLE_INST_CERTIFICATE" | base64 --decode > inst_certificate.p12
          security create-keychain -p $APPLE_KEYCHAIN_PASS build.keychain
          security default-keychain -s build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security unlock-keychain -p $APPLE_KEYCHAIN_PASS build.keychain
          security import app_certificate.p12 -k build.keychain -P $APPLE_APP_CERT_PASSWORD -T /usr/bin/codesign
          security import inst_certificate.p12 \
          -k build.keychain \
          -P "$APPLE_INST_CERT_PASSWORD" \
          -T /usr/bin/productsign \
          -T /usr/bin/codesign \
          -T /usr/bin/pkgbuild
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $APPLE_KEYCHAIN_PASS build.keychain
          security find-identity -v -p codesigning
      #   uses: apple-actions/import-codesign-certs@v3
      #   with:
      #     p12-file-base64: ${{ secrets.APPSTORE_CERTIFICATES_FILE_BASE64 }}
      #     p12-password: ${{ secrets.APPSTORE_CERTIFICATES_PASSWORD }}
      #     keychain: build

      # - name: Verify keychain
      #   run: |
      #     security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k ${{ steps.keychain.outputs.keychain-password }} build.keychain
      #     security find-identity -v -p codesigning
      - name: Print version string (for tag)
        id: get_version_tag
        if: ${{ github.ref_type == 'tag' }}
        run: |
          python -c "with open('VERSION', 'w', encoding='utf-8') as f: f.write('${{ github.ref_name }}')"

      - name: Print version string (for branch)
        id: get_version_branch
        if: ${{ github.ref_type != 'tag' }}
        run: |
          python -c "with open('VERSION', 'w', encoding='utf-8') as f: f.write('${{ github.ref_name }}-${{ github.sha }}')"

      - name: Modify version string permission
        if: ${{ matrix.version_command }}
        run: ${{ matrix.version_command }}

      - name: Build the executable
        run: |
          pyinstaller pyinstaller.spec

      - name: Rename the executable to include platform suffix
        run: ${{ matrix.move_command }}

      - name: Upload intermediate build
        if: inputs.is_release
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-build
          path: |
            dist/*

      - name: Compute the SHA1 hashsum
        if: runner.os == 'Windows'
        run: ${{ matrix.sha_command }}


      # - name: Sign mac executable
      #   if: runner.os == 'macOS' #&& inputs.is_release && ${{github.repository_id}} == 865611084
      #   env:
      #     APP_ID: ${{secrets.APP_ID}}
      #   run: |
      #     /usr/bin/codesign --force -s "$APP_ID" --timestamp -i "org.mangotango.cli" --options runtime --entitlements "mango.entitlements" "dist/mangotango_${{matrix.os}}"
      #     codesign -vvv dist/mangotango_${{matrix.os}}

      - name: Create and sign mac package
        if: runner.os == 'macOS' #&& inputs.is_release && ${{github.repository_id}} == 865611084
        env:
          INST_ID: ${{secrets.INST_ID}}
          APPLE_KEYCHAIN_PASS: ${{secrets.APPLE_KEY_PASS}}
        run: |
          mkdir -p /tmp/mangotango/
          ditto dist/mangotango_${{matrix.os}} /tmp/mangotango/mangotango
          chmod +x /tmp/mangotango/mangotango
          security unlock-keychain -p $APPLE_KEYCHAIN_PASS build.keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$APPLE_KEYCHAIN_PASS" build.keychain
          security find-identity -v -p codesigning build.keychain
          pkgbuild --identifier "org.mangotango.cli" --timestamp --root /tmp/mangotango --install-location /Applications "dist/mangotango_${{matrix.os}}.pkg" --sign D0446E7342EBA33C03840F1D680647511B903966
          # productsign --timestamp --sign "$INST_ID" dist/mangotango_${{matrix.os}}.pkg dist/mangotango_${{matrix.os}}_signed.pkg

      - name: Notarize Mac package
        if: runner.os == 'macOS' #&& inputs.is_release && ${{github.repository_id}} == 865611084
        env:
          APPLE_DEV_EMAIL: ${{secrets.APPLE_DEV_EMAIL}}
          APPLE_TEAM_ID: ${{secrets.TEAM_ID}}
          APP_SPEC_PASS: ${{secrets.APP_SPEC_PASS}}
        run: xcrun notarytool submit dist/mangotango_${{matrix.os}}_signed.pkg --apple-id $APPLE_DEV_EMAIL --team-id $APPLE_TEAM_ID --password $APP_SPEC_PASS --wait > notarization_output.txt

      - name: Staple the notarization ticket
        if: runner.os == 'macOS'
        run: |
          xcrun stapler staple dist/mangotango_${{matrix.os}}_signed.pkg

      - name: Clean up macOS Artifacts
        if: runner.os == 'macOS' #&& inputs.is_release && ${{github.repository_id}} == 865611084
        run: |
          rm -rf /tmp/mangotango
          rm -rf dist/mangotango_${{matrix.os}}
          rm -rf dist/mangotango_${{matrix.os}}.pkg
          mv dist/mangotango_${{matrix.os}}_signed.pkg dist/mangotango_${{matrix.os}}.pkg

      - name: Compute the SHA1 hashsum for macOS .pkg
        if: runner.os == 'macOS' #&& inputs.is_release && ${{github.repository_id}} == 865611084
        run: ${{ matrix.sha_command }}

      - name: Inspect the dist/ directory before uploading artifacts
        run: ${{ matrix.list_command }}

      - name: Check that the executable runs
        if: inputs.is_release == false
        run: ${{ matrix.check_command }}

      - name: Upload artifacts
        if: inputs.is_release
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            dist/*


